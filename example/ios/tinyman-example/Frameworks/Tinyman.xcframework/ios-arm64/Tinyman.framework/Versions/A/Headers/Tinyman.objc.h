// Objective-C API for talking to github.com/synycboom/tinyman-mobile-sdk/tinyman Go package.
//   gobind -lang=objc github.com/synycboom/tinyman-mobile-sdk/tinyman
//
// File is generated by gobind. Do not edit.

#ifndef __Tinyman_H__
#define __Tinyman_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class TinymanAccount;
@class TinymanAccountInformation;
@class TinymanAddressIterator;
@class TinymanAlgodClient;
@class TinymanAsset;
@class TinymanAssetAmount;
@class TinymanAssetAmountIterator;
@class TinymanBurnQuote;
@class TinymanClient;
@class TinymanHeader;
@class TinymanHeaderIterator;
@class TinymanLogicSig;
@class TinymanLogicSigAccount;
@class TinymanLogicSigArgsIterator;
@class TinymanMintQuote;
@class TinymanMultiSigAccount;
@class TinymanMultisigSig;
@class TinymanMultisigSubsig;
@class TinymanMultisigSubsigIterator;
@class TinymanPool;
@class TinymanPoolInfo;
@class TinymanPoolPosition;
@class TinymanPublicKeyIterator;
@class TinymanRedeemQuote;
@class TinymanRedeemQuoteIterator;
@class TinymanSignature;
@class TinymanSignedTransaction;
@class TinymanSignedTransactionIterator;
@class TinymanSuggestedParams;
@class TinymanSwapQuote;
@class TinymanTransaction;
@class TinymanTransactionGroup;
@class TinymanTransactionIterator;

/**
 * Account represents an account
 */
@interface TinymanAccount : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewAccount creates an account from a given type either a base64 encoded private key or a mnemonic
 */
- (nullable instancetype)init:(NSString* _Nullable)from value:(NSString* _Nullable)value;
/**
 * GetAddress returns an address
 */
- (NSString* _Nonnull)getAddress;
/**
 * GetPrivateKey returns a private key
 */
- (NSData* _Nullable)getPrivateKey;
/**
 * GetPublicKey returns a public key
 */
- (NSData* _Nullable)getPublicKey;
@end

/**
 * AccountInformation represents an account information at a given round
This can be initiated only by fetching via the algorand sdk
 */
@interface TinymanAccountInformation : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@end

/**
 * AddressIterator is an address iterator
 */
@interface TinymanAddressIterator : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Add adds an item to the iterator
 */
- (void)add:(NSString* _Nullable)item;
/**
 * HasNext return true if there are items to be iterated
 */
- (BOOL)hasNext;
/**
 * Next returns the next item
 */
- (NSString* _Nonnull)next;
/**
 * Reset resets the iterator
 */
- (void)reset;
@end

/**
 * AlgodClient is a wrapper for algod client
 */
@interface TinymanAlgodClient : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * AccountInformation fetches account information
 */
- (TinymanAccountInformation* _Nullable)accountInformation:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
/**
 * SendRawTransaction sends a transaction to the blockchain
 */
- (BOOL)sendRawTransaction:(NSData* _Nullable)rawTx error:(NSError* _Nullable* _Nullable)error;
/**
 * SuggestedParams returns suggested params
 */
- (TinymanSuggestedParams* _Nullable)suggestedParams:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Asset is an Algorand token
 */
@interface TinymanAsset : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewAsset creates an asset. Note that id and decimals are strings here
Eventually they will be converted to 64-bit unsigned integers
 */
- (nullable instancetype)init:(NSString* _Nullable)id_ decimals:(NSString* _Nullable)decimals name:(NSString* _Nullable)name unitName:(NSString* _Nullable)unitName;
/**
 * GetDecimals returns a decimals of the asset by converting a 64-bit unsigned integer to a string
 */
- (NSString* _Nonnull)getDecimals;
/**
 * GetId returns an id of the asset by converting a 64-bit unsigned integer to a string
 */
- (NSString* _Nonnull)getId;
/**
 * GetName returns a name of the asset
 */
- (NSString* _Nonnull)getName;
/**
 * GetUnitName returns a unit name of the asset
 */
- (NSString* _Nonnull)getUnitName;
/**
 * SetDecimals sets a decimals of the asset the value will be converted to 64-bit unsigned integer
 */
- (BOOL)setDecimals:(NSString* _Nullable)value error:(NSError* _Nullable* _Nullable)error;
/**
 * SetID sets an id of the asset the value will be converted to 64-bit unsigned integer
 */
- (BOOL)setID:(NSString* _Nullable)value error:(NSError* _Nullable* _Nullable)error;
/**
 * SetName sets a name of the asset
 */
- (void)setName:(NSString* _Nullable)value;
/**
 * SetUnitName sets a unit name of the asset
 */
- (void)setUnitName:(NSString* _Nullable)value;
@end

/**
 * AssetAmount represents an asset amount
 */
@interface TinymanAssetAmount : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewAssetAmount creates a new asset amount. Note that amount is a string here
Eventually it will be converted to 64-bit unsigned integer
 */
- (nullable instancetype)init;
/**
 * GetAmount returns an asset by converting the underlying 64-bit unsigned integer to a string
 */
- (NSString* _Nonnull)getAmount;
/**
 * GetAsset returns an asset
 */
- (TinymanAsset* _Nullable)getAsset;
/**
 * SetAmount sets an amount the value will be converted to 64-bit unsigned integer
 */
- (BOOL)setAmount:(NSString* _Nullable)value error:(NSError* _Nullable* _Nullable)error;
/**
 * SetAsset sets an asset
 */
- (BOOL)setAsset:(TinymanAsset* _Nullable)asset error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * AssetAmountIterator is an iterator for iterating amounts
 */
@interface TinymanAssetAmountIterator : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Add adds an item to the iterator
 */
- (void)add:(TinymanAssetAmount* _Nullable)item;
/**
 * HasNext return true if there are asset amounts to be iterated
 */
- (BOOL)hasNext;
/**
 * Next returns the next a asset amount, returns nil if no asset amounts left
 */
- (TinymanAssetAmount* _Nullable)next;
/**
 * Reset resets the iterator
 */
- (void)reset;
@end

/**
 * BurnQuote represents a burn quote
 */
@interface TinymanBurnQuote : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * GetAssetAmountsOutIterator returns an iterator for iterating output asset amounts
 */
- (TinymanAssetAmountIterator* _Nullable)getAssetAmountsOutIterator;
/**
 * GetAssetAmountsOutWithSlippageIterator returns an iterator for iterating out asset amounts after applying the slippage
 */
- (TinymanAssetAmountIterator* _Nullable)getAssetAmountsOutWithSlippageIterator:(NSError* _Nullable* _Nullable)error;
/**
 * GetLiquidityAssetAmount returns a liquidity asset amount
 */
- (TinymanAssetAmount* _Nullable)getLiquidityAssetAmount;
/**
 * GetSlippage returns a slippage
 */
- (NSString* _Nonnull)getSlippage;
@end

/**
 * Client represents the Tinyman client
 */
@interface TinymanClient : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewClient create a Tinyman client
validatorAppID is converted to uint64
 */
- (nullable instancetype)init:(TinymanAlgodClient* _Nullable)algodCli validatorAppID:(NSString* _Nullable)validatorAppID userAddress:(NSString* _Nullable)userAddress;
/**
 * FetchAsset fetches an asset for a given asset id
assetID is converted to uint64
 */
- (TinymanAsset* _Nullable)fetchAsset:(NSString* _Nullable)assetID error:(NSError* _Nullable* _Nullable)error;
/**
 * FetchBalance returns an asset balance of a user
 */
- (TinymanAssetAmount* _Nullable)fetchBalance:(TinymanAsset* _Nullable)asset userAddress:(NSString* _Nullable)userAddress error:(NSError* _Nullable* _Nullable)error;
/**
 * FetchExcessAmount fetches user's excess amounts and returns redeem quote iterator
 */
- (TinymanRedeemQuoteIterator* _Nullable)fetchExcessAmount:(NSString* _Nullable)userAddr error:(NSError* _Nullable* _Nullable)error;
/**
 * FetchPool fetches a pool for given asset1 and asset2
 */
- (TinymanPool* _Nullable)fetchPool:(TinymanAsset* _Nullable)asset1 asset2:(TinymanAsset* _Nullable)asset2 fetch:(BOOL)fetch error:(NSError* _Nullable* _Nullable)error;
/**
 * GetUserAddress returns a user address attached to the client
 */
- (NSString* _Nonnull)getUserAddress;
/**
 * GetValidatorAppID returns a validator app id
 */
- (NSString* _Nonnull)getValidatorAppID;
/**
 * IsAssetOptedIn checks whether a user opted in for asset
assetID is converted to uint64
 */
- (BOOL)isAssetOptedIn:(NSString* _Nullable)assetID userAddress:(NSString* _Nullable)userAddress ret0_:(BOOL* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * IsOptedIn checks whether a user opted in for the application
 */
- (BOOL)isOptedIn:(NSString* _Nullable)userAddress ret0_:(BOOL* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * PrepareAppOptInTransaction prepares an app opt-in transaction and returns a transaction group
 */
- (TinymanTransactionGroup* _Nullable)prepareAppOptInTransaction:(NSString* _Nullable)userAddress error:(NSError* _Nullable* _Nullable)error;
/**
 * PrepareAssetOptInTransactions prepares asset opt-in transaction and returns a transaction group
assetID is converted to uint64
 */
- (TinymanTransactionGroup* _Nullable)prepareAssetOptInTransactions:(NSString* _Nullable)assetID userAddress:(NSString* _Nullable)userAddress error:(NSError* _Nullable* _Nullable)error;
/**
 * Submit submits a transaction group to the blockchain
 */
- (NSString* _Nonnull)submit:(TinymanTransactionGroup* _Nullable)txGroup wait:(BOOL)wait error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Header is the Algorand client header
 */
@interface TinymanHeader : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull key;
@property (nonatomic) NSString* _Nonnull value;
@end

/**
 * HeaderIterator is the header iterator
 */
@interface TinymanHeaderIterator : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Add adds an item to the iterator
 */
- (void)add:(TinymanHeader* _Nullable)item;
/**
 * HasNext return true if there are items to be iterated
 */
- (BOOL)hasNext;
/**
 * Next returns the next item
 */
- (TinymanHeader* _Nullable)next;
/**
 * Reset resets the iterator
 */
- (void)reset;
@end

/**
 * LogicSig contains logic for validating a transaction.
LogicSig is signed by an account, allowing delegation of operations.
OR
LogicSig defines a contract account.
 */
@interface TinymanLogicSig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * GetArgs returns LogicSigArgsIterator
 */
- (TinymanLogicSigArgsIterator* _Nullable)getArgs;
/**
 * GetLogic returns Logic signed by GetSig or GetMsig
OR hashed to be the GetAddress of an account.
 */
- (NSData* _Nullable)getLogic;
/**
 * GetMsig returns the signature of the multisig account that has delegated to this LogicSig, if any
 */
- (TinymanMultisigSig* _Nullable)getMsig;
/**
 * GetSig returns the signature of the account that has delegated to this LogicSig, if any
 */
- (TinymanSignature* _Nullable)getSig;
/**
 * IsBlank returns true iff the lsig is empty. We need this instead of just
comparing with == LogicSig{}, because it contains slices.
 */
- (BOOL)isBlank;
/**
 * SetArgs sets args from LogicSigArgsIterator
 */
- (void)setArgs:(TinymanLogicSigArgsIterator* _Nullable)iter;
/**
 * SetLogic sets a logic
 */
- (void)setLogic:(NSData* _Nullable)value;
/**
 * SetMsig sets the signature of the multisig account
 */
- (void)setMsig:(TinymanMultisigSig* _Nullable)msig;
/**
 * SetSig sets the signature
 */
- (void)setSig:(TinymanSignature* _Nullable)sig;
@end

/**
 * LogicSigAccount represents an account that can sign with a LogicSig program.
 */
@interface TinymanLogicSigAccount : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * AppendMultisigSignature adds an additional signature from a member of the
delegating multisig account.

The LogicSigAccount must represent a delegated LogicSig backed by a multisig
account.
 */
- (BOOL)appendMultisigSignature:(NSData* _Nullable)signer error:(NSError* _Nullable* _Nullable)error;
/**
 * GetAddress returns the address of this LogicSigAccount.

If the LogicSig is delegated to another account, this will return the address
of that account.

If the LogicSig is not delegated to another account, this will return an
escrow address that is the hash of the LogicSig's program code.
 */
- (NSString* _Nonnull)getAddress:(NSError* _Nullable* _Nullable)error;
/**
 * GetLsig returns the underlying LogicSig object
 */
- (TinymanLogicSig* _Nullable)getLsig;
/**
 * GetSigningKey returns the key that provided GetLsig.GetSig, if any
 */
- (NSData* _Nullable)getSigningKey;
/**
 * IsDelegated returns true if and only if the LogicSig has been delegated to
another account with a signature.

Note this function only checks for the presence of a delegation signature. To
verify the delegation signature, use VerifyLogicSig.
 */
- (BOOL)isDelegated;
/**
 * SetLsig sets the underlying LogicSig object
 */
- (void)setLsig:(TinymanLogicSig* _Nullable)lsig;
/**
 * SetSigningKey set the key that provided GetLsig.GetSig
 */
- (void)setSigningKey:(NSData* _Nullable)signingKey;
@end

/**
 * LogicSigArgsIterator is a logic signature argument iterator
 */
@interface TinymanLogicSigArgsIterator : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Add adds an item to the iterator
 */
- (void)add:(NSData* _Nullable)item;
/**
 * HasNext return true if there are items to be iterated
 */
- (BOOL)hasNext;
/**
 * Next returns the next item
 */
- (NSData* _Nullable)next;
/**
 * Reset resets the iterator
 */
- (void)reset;
@end

/**
 * MintQuote represents a mint quote
 */
@interface TinymanMintQuote : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * GetAssetAmountsInIterator returns an iterator for iterating input asset amounts
 */
- (TinymanAssetAmountIterator* _Nullable)getAssetAmountsInIterator;
/**
 * GetLiquidityAssetAmount returns a liquidity asset amount
 */
- (TinymanAssetAmount* _Nullable)getLiquidityAssetAmount;
/**
 * GetLiquidityAssetAmountWithSlippage calculates liquidity asset after applying the slippage
 */
- (TinymanAssetAmount* _Nullable)getLiquidityAssetAmountWithSlippage:(NSError* _Nullable* _Nullable)error;
/**
 * GetSlippage returns a slippage
 */
- (NSString* _Nonnull)getSlippage;
@end

/**
 * MultiSigAccount is a convenience type for holding multisig preimage data
 */
@interface TinymanMultiSigAccount : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Address takes this multisig preimage data, and generates the corresponding identifying
address, committing to the exact group, version, and public keys that it requires to sign.
Hash("MultiSigAddr" || version uint8 || threshold uint8 || PK1 || PK2 || ...)
 */
- (NSString* _Nonnull)address:(NSError* _Nullable* _Nullable)error;
/**
 * Blank return true if MultiSigAccount is empty
struct containing []ed25519.GetPublicKey cannot be compared
 */
- (BOOL)blank;
/**
 * Pks returns a public key iterator which is an ordered list of public keys that could potentially sign a message
 */
- (TinymanPublicKeyIterator* _Nullable)pks;
/**
 * SetPks set public keys by PublicKeyIterator
 */
- (void)setPks:(TinymanPublicKeyIterator* _Nullable)iter;
/**
 * SetThreshold set a threshold
 */
- (void)setThreshold:(long)value;
/**
 * SetVersion sets a version
 */
- (void)setVersion:(long)value;
/**
 * Threshold returns a threshold which is how many signatures are needed to fully sign as this address
 */
- (long)threshold;
/**
 * Validate ensures that this multisig setup is a valid multisig account
 */
- (BOOL)validate:(NSError* _Nullable* _Nullable)error;
/**
 * Version return a version which is the version of this multisig
 */
- (long)version;
@end

/**
 * MultisigSig holds multiple GetSubsigs, as well as threshold and version info
 */
@interface TinymanMultisigSig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * GetSubsigs returns a new MultisigSubsig iterator
 */
- (TinymanMultisigSubsigIterator* _Nullable)getSubsigs;
/**
 * GetThreshold returns the threshold which is converted from uint8
 */
- (long)getThreshold;
/**
 * GetVersion returns the version which is converted from uint8
 */
- (long)getVersion;
/**
 * IsBlank returns true iff the msig is empty. We need this instead of just
comparing with == MultisigSig{}, because GetSubsigs is a slice.
 */
- (BOOL)isBlank;
/**
 * SetSubsigs sets GetSubsigs from MultisigSubsigIterator
 */
- (BOOL)setSubsigs:(TinymanMultisigSubsigIterator* _Nullable)iter error:(NSError* _Nullable* _Nullable)error;
/**
 * SetThreshold sets the varsion
 */
- (void)setThreshold:(long)value;
/**
 * SetVersion sets the varsion
 */
- (void)setVersion:(long)value;
@end

/**
 * MultisigSubsig contains a single public key and, optionally, a signature
 */
@interface TinymanMultisigSubsig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * GetKey returns a key
 */
- (NSData* _Nullable)getKey;
/**
 * GetSignature returns a signature
 */
- (TinymanSignature* _Nullable)getSignature;
/**
 * SetKey a key
 */
- (void)setKey:(NSData* _Nullable)value;
/**
 * SetSignature sets a signature
 */
- (void)setSignature:(TinymanSignature* _Nullable)sig;
@end

/**
 * MultisigSubsigIterator is an iterator
 */
@interface TinymanMultisigSubsigIterator : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Add adds an item to the iterator
 */
- (void)add:(TinymanMultisigSubsig* _Nullable)item;
/**
 * HasNext return true if there are items to be iterated
 */
- (BOOL)hasNext;
/**
 * Next returns the next item
 */
- (TinymanMultisigSubsig* _Nullable)next;
/**
 * Reset resets the iterator
 */
- (void)reset;
@end

/**
 * Pool represents a liquidity pool
 */
@interface TinymanPool : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewPool initializes a new liquidity pool
validatorAppID will be converted to uint64
 */
- (nullable instancetype)init:(TinymanAlgodClient* _Nullable)ac assetA:(TinymanAsset* _Nullable)assetA assetB:(TinymanAsset* _Nullable)assetB info:(TinymanPoolInfo* _Nullable)info validatorAppID:(NSString* _Nullable)validatorAppID userAddress:(NSString* _Nullable)userAddress fetch:(BOOL)fetch;
/**
 * Convert converts one asset amount to another
 */
- (TinymanAssetAmount* _Nullable)convert:(TinymanAssetAmount* _Nullable)amount error:(NSError* _Nullable* _Nullable)error;
/**
 * FetchBurnQuote returns a burn quote
slippage is converted to float64
 */
- (TinymanBurnQuote* _Nullable)fetchBurnQuote:(TinymanAssetAmount* _Nullable)liquidityAsset slippage:(NSString* _Nullable)slippage error:(NSError* _Nullable* _Nullable)error;
/**
 * FetchFixedInputSwapQuote returns a fixed input swap quote
slippage is converted to float64
 */
- (TinymanSwapQuote* _Nullable)fetchFixedInputSwapQuote:(TinymanAssetAmount* _Nullable)amountIn slippage:(NSString* _Nullable)slippage error:(NSError* _Nullable* _Nullable)error;
/**
 * FetchFixedOutputSwapQuote returns a fixed input swap quote
slippage is converted to float64
 */
- (TinymanSwapQuote* _Nullable)fetchFixedOutputSwapQuote:(TinymanAssetAmount* _Nullable)amountOut slippage:(NSString* _Nullable)slippage error:(NSError* _Nullable* _Nullable)error;
/**
 * FetchMintQuote returns a mint quote
slippage is converted to float64
 */
- (TinymanMintQuote* _Nullable)fetchMintQuote:(TinymanAssetAmount* _Nullable)amountA amountB:(TinymanAssetAmount* _Nullable)amountB slippage:(NSString* _Nullable)slippage error:(NSError* _Nullable* _Nullable)error;
/**
 * FetchPoolPosition fetches pool position of a user
 */
- (TinymanPoolPosition* _Nullable)fetchPoolPosition:(NSString* _Nullable)userAddress error:(NSError* _Nullable* _Nullable)error;
/**
 * FetchStateBytes returns an application state bytes value of the pool by a given key
The returned value is converted to string-formatted uint64
 */
- (NSData* _Nullable)fetchStateBytes:(NSString* _Nullable)key error:(NSError* _Nullable* _Nullable)error;
/**
 * FetchStateInt returns an application state int value of the pool by a given key
The returned value is converted to string-formatted uint64
 */
- (NSString* _Nonnull)fetchStateInt:(NSString* _Nullable)key error:(NSError* _Nullable* _Nullable)error;
/**
 * FilterRedeemQuotes filters only redeem quote that belonging to this pool
It returns a new RedeemQuoteIterator
 */
- (TinymanRedeemQuoteIterator* _Nullable)filterRedeemQuotes:(TinymanRedeemQuoteIterator* _Nullable)iter error:(NSError* _Nullable* _Nullable)error;
/**
 * GetAddress returns a logic signature address (pool address)
 */
- (NSString* _Nonnull)getAddress:(NSError* _Nullable* _Nullable)error;
/**
 * GetAsset1 returns an asset 1
 */
- (TinymanAsset* _Nullable)getAsset1;
/**
 * GetAsset1Price returns asset1 price in string-formatted float64
 */
- (NSString* _Nonnull)getAsset1Price;
/**
 * GetAsset2 returns an asset 2
 */
- (TinymanAsset* _Nullable)getAsset2;
/**
 * GetAsset2Price returns asset2 price in string-formatted float64
 */
- (NSString* _Nonnull)getAsset2Price;
/**
 * GetInfo returns pool information
 */
- (TinymanPoolInfo* _Nullable)getInfo:(NSError* _Nullable* _Nullable)error;
/**
 * GetLiquidityAsset returns a liquidity asset
 */
- (TinymanAsset* _Nullable)getLiquidityAsset;
/**
 * GetLogicSig returns a logic signature account
 */
- (TinymanLogicSigAccount* _Nullable)getLogicSig:(NSError* _Nullable* _Nullable)error;
/**
 * GetMinimumBalance calculates minimum balance
The returned value is in uint64 formatted string
 */
- (NSString* _Nonnull)getMinimumBalance;
/**
 * GetRedeemQuoteMatchesAssetID filters redeem quote belonging to this pool which matches an asset id
assetID is converted to uint64
 */
- (TinymanRedeemQuote* _Nullable)getRedeemQuoteMatchesAssetID:(NSString* _Nullable)assetID iter:(TinymanRedeemQuoteIterator* _Nullable)iter error:(NSError* _Nullable* _Nullable)error;
/**
 * PrepareBootstrapTransactions prepares bootstrap transaction and returns a transaction group
 */
- (TinymanTransactionGroup* _Nullable)prepareBootstrapTransactions:(NSString* _Nullable)bootstrapperAddress error:(NSError* _Nullable* _Nullable)error;
/**
 * PrepareBurnTransactions prepares burn transaction and returns a transaction group
 */
- (TinymanTransactionGroup* _Nullable)prepareBurnTransactions:(TinymanAssetAmountIterator* _Nullable)assetsOutIter liquidityAssetAmount:(TinymanAssetAmount* _Nullable)liquidityAssetAmount burnerAddress:(NSString* _Nullable)burnerAddress error:(NSError* _Nullable* _Nullable)error;
/**
 * PrepareBurnTransactionsFromQuote prepares burn transaction from a given burn quote and returns a transaction group
 */
- (TinymanTransactionGroup* _Nullable)prepareBurnTransactionsFromQuote:(TinymanBurnQuote* _Nullable)quote burnerAddress:(NSString* _Nullable)burnerAddress error:(NSError* _Nullable* _Nullable)error;
/**
 * PrepareLiquidityAssetOptInTransactions prepares liquidity asset opt-in transaction and returns a transaction group
 */
- (TinymanTransactionGroup* _Nullable)prepareLiquidityAssetOptInTransactions:(NSString* _Nullable)userAddress error:(NSError* _Nullable* _Nullable)error;
/**
 * PrepareMintTransactions prepares mint transaction and returns a transaction group
 */
- (TinymanTransactionGroup* _Nullable)prepareMintTransactions:(TinymanAssetAmountIterator* _Nullable)amountsInIter liquidityAssetAmount:(TinymanAssetAmount* _Nullable)liquidityAssetAmount minterAddress:(NSString* _Nullable)minterAddress error:(NSError* _Nullable* _Nullable)error;
/**
 * PrepareMintTransactionsFromQuote prepares mint transaction from a given mint quote and returns a transaction group
 */
- (TinymanTransactionGroup* _Nullable)prepareMintTransactionsFromQuote:(TinymanMintQuote* _Nullable)quote minterAddress:(NSString* _Nullable)minterAddress error:(NSError* _Nullable* _Nullable)error;
/**
 * PrepareRedeemTransactions prepares redeem transaction and returns a transaction group
 */
- (TinymanTransactionGroup* _Nullable)prepareRedeemTransactions:(TinymanAssetAmount* _Nullable)amountOut redeemerAddress:(NSString* _Nullable)redeemerAddress error:(NSError* _Nullable* _Nullable)error;
/**
 * PrepareRedeemTransactionsFromQuote prepares redeem transactions and return a transaction group from quote
 */
- (TinymanTransactionGroup* _Nullable)prepareRedeemTransactionsFromQuote:(TinymanRedeemQuote* _Nullable)quote redeemerAddress:(NSString* _Nullable)redeemerAddress error:(NSError* _Nullable* _Nullable)error;
/**
 * PrepareSwapTransactions prepares swap transaction and returns a transaction group
 */
- (TinymanTransactionGroup* _Nullable)prepareSwapTransactions:(TinymanAssetAmount* _Nullable)assetAmountIn assetAmountOut:(TinymanAssetAmount* _Nullable)assetAmountOut swapType:(NSString* _Nullable)swapType swapperAddress:(NSString* _Nullable)swapperAddress error:(NSError* _Nullable* _Nullable)error;
/**
 * PrepareSwapTransactionsFromQuote prepares swap transaction from a given swap quote and returns a transaction group
 */
- (TinymanTransactionGroup* _Nullable)prepareSwapTransactionsFromQuote:(TinymanSwapQuote* _Nullable)quote swapperAddress:(NSString* _Nullable)swapperAddress error:(NSError* _Nullable* _Nullable)error;
/**
 * Refresh refreshes pool information
 */
- (BOOL)refresh:(TinymanPoolInfo* _Nullable)info error:(NSError* _Nullable* _Nullable)error;
/**
 * UpdateFromInfo updates pool information from a given pool info
 */
- (BOOL)updateFromInfo:(TinymanPoolInfo* _Nullable)info error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * PoolInfo represents pool information
 */
@interface TinymanPoolInfo : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewPoolInfo creates a pool information
 */
- (nullable instancetype)init;
/**
 * GetAddress is a pool address
 */
- (NSString* _Nonnull)getAddress;
/**
 * GetAlgoBalance is a balance of the pool
 */
- (NSString* _Nonnull)getAlgoBalance;
/**
 * GetAsset1ID is an asset1 id
 */
- (NSString* _Nonnull)getAsset1ID;
/**
 * GetAsset1Reserves is an asset1's reserves value
 */
- (NSString* _Nonnull)getAsset1Reserves;
/**
 * GetAsset1UnitName is an asset1 unit name
 */
- (NSString* _Nonnull)getAsset1UnitName;
/**
 * GetAsset2ID is an asset2 id
 */
- (NSString* _Nonnull)getAsset2ID;
/**
 * GetAsset2Reserves is an asset2's reserves value
 */
- (NSString* _Nonnull)getAsset2Reserves;
/**
 * GetAsset2UnitName is an asset2 unit name
 */
- (NSString* _Nonnull)getAsset2UnitName;
/**
 * GetIssuedLiquidity is the total issued liquidity
 */
- (NSString* _Nonnull)getIssuedLiquidity;
/**
 * GetLiquidityAssetID is an asset id for the liquidity
 */
- (NSString* _Nonnull)getLiquidityAssetID;
/**
 * GetLiquidityAssetName is an asset name for the liquidity
 */
- (NSString* _Nonnull)getLiquidityAssetName;
/**
 * GetOutstandingAsset1Amount is an outstanding asset1 amount
 */
- (NSString* _Nonnull)getOutstandingAsset1Amount;
/**
 * GetOutstandingAsset2Amount is an outstanding asset2 amount
 */
- (NSString* _Nonnull)getOutstandingAsset2Amount;
/**
 * GetOutstandingLiquidityAssetAmount is an outstanding liquidity asset amount
 */
- (NSString* _Nonnull)getOutstandingLiquidityAssetAmount;
/**
 * GetRound is the latest fetch round
 */
- (NSString* _Nonnull)getRound;
/**
 * GetUnclaimedProtocolFee is an unclaimed protocol fee
 */
- (NSString* _Nonnull)getUnclaimedProtocolFee;
/**
 * GetValidatorAppID is the validator app id
 */
- (NSString* _Nonnull)getValidatorAppID;
/**
 * SetAddress sets an address of the pool
 */
- (void)setAddress:(NSString* _Nullable)value;
/**
 * SetAlgoBalance sets algo balance, the value will be converted to 64-bit unsigned integer
 */
- (BOOL)setAlgoBalance:(NSString* _Nullable)value error:(NSError* _Nullable* _Nullable)error;
/**
 * SetAsset1ID sets an asset1 id, the value will be converted to 64-bit unsigned integer
 */
- (BOOL)setAsset1ID:(NSString* _Nullable)value error:(NSError* _Nullable* _Nullable)error;
/**
 * SetAsset1Reserves sets a liquidity asset id, the value will be converted to 64-bit unsigned integer
 */
- (BOOL)setAsset1Reserves:(NSString* _Nullable)value error:(NSError* _Nullable* _Nullable)error;
/**
 * SetAsset1UnitName sets an asset1 unit name
 */
- (void)setAsset1UnitName:(NSString* _Nullable)value;
/**
 * SetAsset2ID sets an asset2 id, the value will be converted to 64-bit unsigned integer
 */
- (BOOL)setAsset2ID:(NSString* _Nullable)value error:(NSError* _Nullable* _Nullable)error;
/**
 * SetAsset2Reserves sets a liquidity asset id, the value will be converted to 64-bit unsigned integer
 */
- (BOOL)setAsset2Reserves:(NSString* _Nullable)value error:(NSError* _Nullable* _Nullable)error;
/**
 * SetAsset2UnitName sets an asset1 unit name
 */
- (void)setAsset2UnitName:(NSString* _Nullable)value;
/**
 * SetIssuedLiquidity sets issued liquidity amount, the value will be converted to 64-bit unsigned integer
 */
- (BOOL)setIssuedLiquidity:(NSString* _Nullable)value error:(NSError* _Nullable* _Nullable)error;
/**
 * SetLiquidityAssetID sets a liquidity asset id, the value will be converted to 64-bit unsigned integer
 */
- (BOOL)setLiquidityAssetID:(NSString* _Nullable)value error:(NSError* _Nullable* _Nullable)error;
/**
 * SetLiquidityAssetName sets a liquidity name
 */
- (void)setLiquidityAssetName:(NSString* _Nullable)value;
/**
 * SetOutstandingAsset1Amount sets outstanding asset1 amount, the value will be converted to 64-bit unsigned integer
 */
- (BOOL)setOutstandingAsset1Amount:(NSString* _Nullable)value error:(NSError* _Nullable* _Nullable)error;
/**
 * SetOutstandingAsset2Amount sets outstanding asset2 amount, the value will be converted to 64-bit unsigned integer
 */
- (BOOL)setOutstandingAsset2Amount:(NSString* _Nullable)value error:(NSError* _Nullable* _Nullable)error;
/**
 * SetOutstandingLiquidityAssetAmount sets outstanding liquidity asset amount, the value will be converted to 64-bit unsigned integer
 */
- (BOOL)setOutstandingLiquidityAssetAmount:(NSString* _Nullable)value error:(NSError* _Nullable* _Nullable)error;
/**
 * SetRound sets round, the value will be converted to 64-bit unsigned integer
 */
- (BOOL)setRound:(NSString* _Nullable)value error:(NSError* _Nullable* _Nullable)error;
/**
 * SetUnclaimedProtocolFee sets unclaimed protocol fee, the value will be converted to 64-bit unsigned integer
 */
- (BOOL)setUnclaimedProtocolFee:(NSString* _Nullable)value error:(NSError* _Nullable* _Nullable)error;
/**
 * SetValidatorAppID sets the validator app id, the value will be converted to 64-bit unsigned integer
 */
- (BOOL)setValidatorAppID:(NSString* _Nullable)value error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * PoolPosition represents a user position in the pool
 */
@interface TinymanPoolPosition : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewPoolPosition createa a pool position
 */
- (nullable instancetype)init;
/**
 * GetAssetAmount1 is an asset amount 1
 */
- (TinymanAssetAmount* _Nullable)getAssetAmount1;
/**
 * GetAssetAmount2 is an asset amount 2
 */
- (TinymanAssetAmount* _Nullable)getAssetAmount2;
/**
 * GetLiquidityAssetAmount is a asset asset amount
 */
- (TinymanAssetAmount* _Nullable)getLiquidityAssetAmount;
/**
 * GetShare is a share of user which can be calculated as a percentage by (share * 100)
 */
- (NSString* _Nonnull)getShare;
/**
 * SetAssetAmount1 sets an asset amount 1
 */
- (BOOL)setAssetAmount1:(TinymanAssetAmount* _Nullable)asset error:(NSError* _Nullable* _Nullable)error;
/**
 * SetAssetAmount2 sets an asset amount 2
 */
- (BOOL)setAssetAmount2:(TinymanAssetAmount* _Nullable)asset error:(NSError* _Nullable* _Nullable)error;
/**
 * SetLiquidityAssetAmount sets a liquidity asset amount
 */
- (BOOL)setLiquidityAssetAmount:(TinymanAssetAmount* _Nullable)asset error:(NSError* _Nullable* _Nullable)error;
/**
 * SetShare sets share of the liquidity pool
 */
- (BOOL)setShare:(NSString* _Nullable)value error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * PublicKeyIterator is a public key iterator
 */
@interface TinymanPublicKeyIterator : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Add adds an item to the iterator
 */
- (void)add:(NSData* _Nullable)item;
/**
 * HasNext return true if there are items to be iterated
 */
- (BOOL)hasNext;
/**
 * Next returns the next item
 */
- (NSData* _Nullable)next;
/**
 * Reset resets the iterator
 */
- (void)reset;
@end

/**
 * RedeemQuote represents a redeem quote
 */
@interface TinymanRedeemQuote : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * GetAssetAmount returns an asset amount
 */
- (TinymanAssetAmount* _Nullable)getAssetAmount;
/**
 * GetPoolAddress returns an address of the pool
 */
- (NSString* _Nonnull)getPoolAddress;
@end

/**
 * RedeemQuoteIterator is an iterator for iterating redeem quotes
 */
@interface TinymanRedeemQuoteIterator : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Add adds an item to the iterator
 */
- (void)add:(TinymanRedeemQuote* _Nullable)item;
/**
 * HasNext return true if there are items to be iterated
 */
- (BOOL)hasNext;
/**
 * Next returns the next a item, returns nil if no item left
 */
- (TinymanRedeemQuote* _Nullable)next;
/**
 * Reset resets the iterator
 */
- (void)reset;
@end

/**
 * Signature is an ed25519 signature
 */
@interface TinymanSignature : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Get returns a signature value
 */
- (NSData* _Nullable)get;
/**
 * Set sets a new signature value
 */
- (BOOL)set:(NSData* _Nullable)value error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * SignedTransaction represent a signed transaction
 */
@interface TinymanSignedTransaction : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * TxID is a transaction id
 */
@property (nonatomic) NSString* _Nonnull txID;
/**
 * StxBytes are signed bytes
 */
@property (nonatomic) NSData* _Nullable stxBytes;
@end

/**
 * SignedTransactionIterator is a signed transaction iterator
 */
@interface TinymanSignedTransactionIterator : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Add adds an item to the iterator
 */
- (void)add:(NSData* _Nullable)item;
/**
 * HasNext return true if there are items to be iterated
 */
- (BOOL)hasNext;
/**
 * Next returns the next item
 */
- (NSData* _Nullable)next;
/**
 * Reset resets the iterator
 */
- (void)reset;
@end

/**
 * SuggestedParams wraps the transaction parameters common to all transactions,
typically received from the SuggestedParams endpoint of algod.
This struct itself is not sent over the wire to or from algod: see models.TransactionParams.
 */
@interface TinymanSuggestedParams : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@end

/**
 * SwapQuote represents a swap quote
 */
@interface TinymanSwapQuote : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * GetAssetAmountIn returns an input asset amount
 */
- (TinymanAssetAmount* _Nullable)getAssetAmountIn;
/**
 * GetAssetAmountInWithSlippage returns a calculated input asset amount after applying the slippage
 */
- (TinymanAssetAmount* _Nullable)getAssetAmountInWithSlippage:(NSError* _Nullable* _Nullable)error;
/**
 * GetAssetAmountOut returns an output asset amount
 */
- (TinymanAssetAmount* _Nullable)getAssetAmountOut;
/**
 * GetAssetAmountOutWithSlippage returns a calculated output asset amount after applying the slippage
 */
- (TinymanAssetAmount* _Nullable)getAssetAmountOutWithSlippage:(NSError* _Nullable* _Nullable)error;
/**
 * GetPrice returns the price, the value is converted from float64 to string
 */
- (NSString* _Nonnull)getPrice;
/**
 * GetPriceWithSlippage returns the price after applying the slippage, the value is converted from float64 to string
 */
- (NSString* _Nonnull)getPriceWithSlippage:(NSError* _Nullable* _Nullable)error;
/**
 * GetSlippage returns a slippage
 */
- (NSString* _Nonnull)getSlippage;
/**
 * GetSwapFeeAssetAmount returns a swap fee asset amount
 */
- (TinymanAssetAmount* _Nullable)getSwapFeeAssetAmount;
/**
 * GetSwapType returns a swap type
 */
- (NSString* _Nonnull)getSwapType;
@end

/**
 * Transaction is an Algorand transaction wrapper
 */
@interface TinymanTransaction : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@end

/**
 * TransactionGroup is a group of transaction that can be executed atomically after signing
 */
@interface TinymanTransactionGroup : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * GetSignedTransactionsIterator returns a signed transaction iterator
 */
- (TinymanSignedTransactionIterator* _Nullable)getSignedTransactionsIterator;
/**
 * GetTransactionIterator returns a transaction iterator
 */
- (TinymanTransactionIterator* _Nullable)getTransactionIterator;
/**
 * SetSignedTransactions sets a signed transaction at a given index
 */
- (BOOL)setSignedTransactions:(long)index signedTx:(NSData* _Nullable)signedTx error:(NSError* _Nullable* _Nullable)error;
/**
 * Sign signs a transaction group with an account
 */
- (BOOL)sign:(TinymanAccount* _Nullable)acc error:(NSError* _Nullable* _Nullable)error;
/**
 * SignWithLogicSig signs a transaction group with logic sig account
 */
- (BOOL)signWithLogicSig:(TinymanLogicSigAccount* _Nullable)account error:(NSError* _Nullable* _Nullable)error;
/**
 * Submit sends a signed transaction group to the blockchain
 */
- (NSString* _Nonnull)submit:(TinymanAlgodClient* _Nullable)client wait:(BOOL)wait error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * TransactionIterator is a transaction iterator
 */
@interface TinymanTransactionIterator : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Add adds an item to the iterator
 */
- (void)add:(TinymanTransaction* _Nullable)item;
/**
 * HasNext return true if there are items to be iterated
 */
- (BOOL)hasNext;
/**
 * Next returns the next item
 */
- (TinymanTransaction* _Nullable)next;
/**
 * Reset resets the iterator
 */
- (void)reset;
@end

/**
 * AccountFromMnemonic used when creating a new account object by mnemonic
 */
FOUNDATION_EXPORT NSString* _Nonnull const TinymanAccountFromMnemonic;
/**
 * AccountFromPrivateKey used when creating a new account object by private key
 */
FOUNDATION_EXPORT NSString* _Nonnull const TinymanAccountFromPrivateKey;
/**
 * AlgoTokenDecimals is the algo token decimals
 */
FOUNDATION_EXPORT const int64_t TinymanAlgoTokenDecimals;
/**
 * AlgoTokenName is the algo token name
 */
FOUNDATION_EXPORT NSString* _Nonnull const TinymanAlgoTokenName;
/**
 * AlgoTokenUnitName is the algo token unit name
 */
FOUNDATION_EXPORT NSString* _Nonnull const TinymanAlgoTokenUnitName;
/**
 * AlgodMainnetHost is the algorand main net url
 */
FOUNDATION_EXPORT NSString* _Nonnull const TinymanAlgodMainnetHost;
/**
 * AlgodTestnetHost is the algorand test net url
 */
FOUNDATION_EXPORT NSString* _Nonnull const TinymanAlgodTestnetHost;
FOUNDATION_EXPORT NSString* _Nonnull const TinymanLiquidityAssetUnitName;
FOUNDATION_EXPORT const int64_t TinymanLiquidityTokenDecimals;
FOUNDATION_EXPORT NSString* _Nonnull const TinymanLiquidityTokenUnitName;
/**
 * MainnetValidatorAppId is an alias for the current Tinyman main net validator app id
 */
FOUNDATION_EXPORT const long TinymanMainnetValidatorAppId;
/**
 * MainnetValidatorAppIdV1_1 is the Tinyman main net validator app id version 1.1
 */
FOUNDATION_EXPORT const long TinymanMainnetValidatorAppIdV1_1;
/**
 * SwapFixedInput is a fixed-input swap type
 */
FOUNDATION_EXPORT NSString* _Nonnull const TinymanSwapFixedInput;
/**
 * SwapFixedOutput is a fixed-output swap type
 */
FOUNDATION_EXPORT NSString* _Nonnull const TinymanSwapFixedOutput;
/**
 * TestnetValidatorAppId is an alias for the current Tinyman test net validator app id
 */
FOUNDATION_EXPORT const long TinymanTestnetValidatorAppId;
/**
 * TestnetValidatorAppIdV1_1 is the Tinyman test net validator app id version 1.1
 */
FOUNDATION_EXPORT const long TinymanTestnetValidatorAppIdV1_1;
/**
 * TinyManURL is a tiny man web url
 */
FOUNDATION_EXPORT NSString* _Nonnull const TinymanTinyManURL;
FOUNDATION_EXPORT NSString* _Nonnull const TinymanTotalLiquidityTokens;

/**
 * CreateAnAsset is a function to create an asset, only testing purpose
 */
FOUNDATION_EXPORT NSString* _Nonnull TinymanCreateAnAsset(NSString* _Nullable assetName, NSString* _Nullable unitName, NSString* _Nullable decimals, NSString* _Nullable totalIssuance, NSString* _Nullable userAddress, TinymanAccount* _Nullable account, TinymanAlgodClient* _Nullable ac, NSError* _Nullable* _Nullable error);

/**
 * FetchPoolInfo returns pool information for the given asset1 and asset2
validatorAppID, asset1ID, asset2ID are converted to uint64
 */
FOUNDATION_EXPORT TinymanPoolInfo* _Nullable TinymanFetchPoolInfo(TinymanAlgodClient* _Nullable ac, NSString* _Nullable validatorAppID, NSString* _Nullable asset1ID, NSString* _Nullable asset2ID, NSError* _Nullable* _Nullable error);

/**
 * FromAccountInfo create a pool from an account information
 */
FOUNDATION_EXPORT TinymanPool* _Nullable TinymanFromAccountInfo(TinymanAccountInformation* _Nullable account, TinymanAlgodClient* _Nullable ac, NSString* _Nullable userAddress, NSError* _Nullable* _Nullable error);

/**
 * IsNullRedeemQuote returns true if redeem quote is null
This utility function is created because Swift somehow misinterpret objective-c nullable in some cases
 */
FOUNDATION_EXPORT BOOL TinymanIsNullRedeemQuote(TinymanRedeemQuote* _Nullable value);

/**
 * LogicSigAccountFromLogicSig creates a LogicSigAccount from an existing
LogicSig object.

The parameter signerPublicKey must be present if the LogicSig is delegated
and the delegating account is backed by a single private key (i.e. not a
multisig account). In this case, signerPublicKey must be the public key of
the delegating account. In all other cases, an error will be returned if
signerPublicKey is present.
 */
FOUNDATION_EXPORT TinymanLogicSigAccount* _Nullable TinymanLogicSigAccountFromLogicSig(TinymanLogicSig* _Nullable lsig, NSData* _Nullable signerPublicKey, NSError* _Nullable* _Nullable error);

/**
 * LogicSigAddress returns the contract (escrow) address for a LogicSig.

NOTE: If the LogicSig is delegated to another account this will not
return the delegated address of the LogicSig.
 */
FOUNDATION_EXPORT NSString* _Nonnull TinymanLogicSigAddress(TinymanLogicSig* _Nullable lsig, NSError* _Nullable* _Nullable error);

/**
 * MakeAlgodClient is the factory for constructing the Algorand client for a given endpoint.
 */
FOUNDATION_EXPORT TinymanAlgodClient* _Nullable TinymanMakeAlgodClient(NSString* _Nullable address, NSString* _Nullable apiToken, NSError* _Nullable* _Nullable error);

/**
 * MakeAlgodClientWithHeaders is the factory for constructing the Algorand client for a given endpoint with additional user defined headers.
 */
FOUNDATION_EXPORT TinymanAlgodClient* _Nullable TinymanMakeAlgodClientWithHeaders(NSString* _Nullable address, NSString* _Nullable apiToken, TinymanHeaderIterator* _Nullable headerIter, NSError* _Nullable* _Nullable error);

/**
 * MakeLogicSigAccountDelegated creates a new delegated LogicSigAccount. This
type of LogicSig has the authority to sign transactions on behalf of another
account, called the delegating account. If the delegating account is a
multisig account, use MakeLogicSigAccountDelegated instead.

The parameter signer is the private key of the delegating account.
 */
FOUNDATION_EXPORT TinymanLogicSigAccount* _Nullable TinymanMakeLogicSigAccountDelegated(NSData* _Nullable program, TinymanLogicSigArgsIterator* _Nullable iter, NSData* _Nullable signer, NSError* _Nullable* _Nullable error);

/**
 * MakeLogicSigAccountDelegatedMsig creates a new delegated LogicSigAccount.
This type of LogicSig has the authority to sign transactions on behalf of
another account, called the delegating account. Use this function if the
delegating account is a multisig account, otherwise use
MakeLogicSigAccountDelegated.

The parameter msigAccount is the delegating multisig account.

The parameter signer is the private key of one of the members of the
delegating multisig account. Use the method AppendMultisigSignature on the
returned LogicSigAccount to add additional signatures from other members.
 */
FOUNDATION_EXPORT TinymanLogicSigAccount* _Nullable TinymanMakeLogicSigAccountDelegatedMsig(NSData* _Nullable program, TinymanLogicSigArgsIterator* _Nullable iter, TinymanMultiSigAccount* _Nullable msigAccount, NSData* _Nullable signer, NSError* _Nullable* _Nullable error);

/**
 * MakeLogicSigAccountEscrow creates a new escrow LogicSigAccount. The address
of this account will be a hash of its program.
 */
FOUNDATION_EXPORT TinymanLogicSigAccount* _Nullable TinymanMakeLogicSigAccountEscrow(NSData* _Nullable program, TinymanLogicSigArgsIterator* _Nullable iter, NSError* _Nullable* _Nullable error);

/**
 * MultiSigAccountFromSig is a convenience method that creates an account
from a sig in a signed tx. Useful for getting addresses from signed msig txs, etc.
 */
FOUNDATION_EXPORT TinymanMultiSigAccount* _Nullable TinymanMultiSigAccountFromSig(TinymanMultisigSig* _Nullable sig, NSError* _Nullable* _Nullable error);

/**
 * MultiSigAccountWithParams creates a MultiSigAccount with the given parameters
 */
FOUNDATION_EXPORT TinymanMultiSigAccount* _Nullable TinymanMultiSigAccountWithParams(long version, long threshold, TinymanAddressIterator* _Nullable addressIter, NSError* _Nullable* _Nullable error);

/**
 * NewAccount creates an account from a given type either a base64 encoded private key or a mnemonic
 */
FOUNDATION_EXPORT TinymanAccount* _Nullable TinymanNewAccount(NSString* _Nullable from, NSString* _Nullable value, NSError* _Nullable* _Nullable error);

/**
 * NewAsset creates an asset. Note that id and decimals are strings here
Eventually they will be converted to 64-bit unsigned integers
 */
FOUNDATION_EXPORT TinymanAsset* _Nullable TinymanNewAsset(NSString* _Nullable id_, NSString* _Nullable decimals, NSString* _Nullable name, NSString* _Nullable unitName, NSError* _Nullable* _Nullable error);

/**
 * NewAssetAmount creates a new asset amount. Note that amount is a string here
Eventually it will be converted to 64-bit unsigned integer
 */
FOUNDATION_EXPORT TinymanAssetAmount* _Nullable TinymanNewAssetAmount(void);

/**
 * NewClient create a Tinyman client
validatorAppID is converted to uint64
 */
FOUNDATION_EXPORT TinymanClient* _Nullable TinymanNewClient(TinymanAlgodClient* _Nullable algodCli, NSString* _Nullable validatorAppID, NSString* _Nullable userAddress, NSError* _Nullable* _Nullable error);

/**
 * NewMainNetClient create a main net Tinyman client
 */
FOUNDATION_EXPORT TinymanClient* _Nullable TinymanNewMainNetClient(TinymanAlgodClient* _Nullable algodCli, NSString* _Nullable userAddress, NSError* _Nullable* _Nullable error);

/**
 * NewPool initializes a new liquidity pool
validatorAppID will be converted to uint64
 */
FOUNDATION_EXPORT TinymanPool* _Nullable TinymanNewPool(TinymanAlgodClient* _Nullable ac, TinymanAsset* _Nullable assetA, TinymanAsset* _Nullable assetB, TinymanPoolInfo* _Nullable info, NSString* _Nullable validatorAppID, NSString* _Nullable userAddress, BOOL fetch, NSError* _Nullable* _Nullable error);

/**
 * NewPoolInfo creates a pool information
 */
FOUNDATION_EXPORT TinymanPoolInfo* _Nullable TinymanNewPoolInfo(void);

/**
 * NewPoolPosition createa a pool position
 */
FOUNDATION_EXPORT TinymanPoolPosition* _Nullable TinymanNewPoolPosition(void);

/**
 * NewTestNetClient create a test net Tinyman client
 */
FOUNDATION_EXPORT TinymanClient* _Nullable TinymanNewTestNetClient(TinymanAlgodClient* _Nullable algodCli, NSString* _Nullable userAddress, NSError* _Nullable* _Nullable error);

/**
 * PoolLogicSigAccount creates a logic signature account of the pool
 */
FOUNDATION_EXPORT TinymanLogicSigAccount* _Nullable TinymanPoolLogicSigAccount(NSString* _Nullable validatorAppID, NSString* _Nullable asset1ID, NSString* _Nullable asset2ID, NSError* _Nullable* _Nullable error);

/**
 * PrepareAppOptInTransactions prepares a transaction group to opt-in of Tinyman
validatorAppID is converted to uint64
 */
FOUNDATION_EXPORT TinymanTransactionGroup* _Nullable TinymanPrepareAppOptInTransactions(NSString* _Nullable validatorAppID, NSString* _Nullable senderAddress, TinymanSuggestedParams* _Nullable suggestedParams, NSError* _Nullable* _Nullable error);

/**
 * PrepareAppOptOutTransactions prepares a transaction group to opt-out of Tinyman
validatorAppID is converted to uint64
 */
FOUNDATION_EXPORT TinymanTransactionGroup* _Nullable TinymanPrepareAppOptOutTransactions(NSString* _Nullable validatorAppID, NSString* _Nullable senderAddress, TinymanSuggestedParams* _Nullable suggestedParams, NSError* _Nullable* _Nullable error);

/**
 * PrepareAssetOptInTransactions prepares a transaction group to opt-in an asset
assetID is converted to uint64
 */
FOUNDATION_EXPORT TinymanTransactionGroup* _Nullable TinymanPrepareAssetOptInTransactions(NSString* _Nullable assetID, NSString* _Nullable senderAddress, TinymanSuggestedParams* _Nullable suggestedParams, NSError* _Nullable* _Nullable error);

/**
 * PrepareBootstrapTransactions prepares a transaction group to bootstrap a new pool
validatorAppID, asset1ID, asset2ID are converted to uint64
 */
FOUNDATION_EXPORT TinymanTransactionGroup* _Nullable TinymanPrepareBootstrapTransactions(NSString* _Nullable validatorAppID, NSString* _Nullable asset1ID, NSString* _Nullable asset2ID, NSString* _Nullable asset1UnitName, NSString* _Nullable asset2UnitName, NSString* _Nullable senderAddress, TinymanSuggestedParams* _Nullable suggestedParams, NSError* _Nullable* _Nullable error);

/**
 * PrepareBurnTransactions prepares a transaction group to burn the liquidity pool asset amount in exchange for pool assets.
validatorappID, asset1ID, asset2ID, liquidityAssetID, asset1Amount, asset2Amount, liquidityAssetAmount are converted to uint64
 */
FOUNDATION_EXPORT TinymanTransactionGroup* _Nullable TinymanPrepareBurnTransactions(NSString* _Nullable validatorAppID, NSString* _Nullable asset1ID, NSString* _Nullable asset2ID, NSString* _Nullable liquidityAssetID, NSString* _Nullable asset1Amount, NSString* _Nullable asset2Amount, NSString* _Nullable liquidityAssetAmount, NSString* _Nullable senderAddress, TinymanSuggestedParams* _Nullable suggestedParams, NSError* _Nullable* _Nullable error);

/**
 * PrepareMintTransactions prepares a transaction group to mint the liquidity pool asset amount in exchange for pool assets.
validatorappID, asset1ID, asset2ID, liquidityAssetID, asset1Amount, asset2Amount, liquidityAssetAmount are converted to uint64
 */
FOUNDATION_EXPORT TinymanTransactionGroup* _Nullable TinymanPrepareMintTransactions(NSString* _Nullable validatorAppID, NSString* _Nullable asset1ID, NSString* _Nullable asset2ID, NSString* _Nullable liquidityAssetID, NSString* _Nullable asset1Amount, NSString* _Nullable asset2Amount, NSString* _Nullable liquidityAssetAmount, NSString* _Nullable senderAddress, TinymanSuggestedParams* _Nullable suggestedParams, NSError* _Nullable* _Nullable error);

/**
 * PrepareRedeemTransactions prepares a transaction group to redeem a specified excess asset amount from a pool.
validatorAppID, asset1ID, asset2ID, liquidityAssetID, assetID, assetAmount are converted to uint64
 */
FOUNDATION_EXPORT TinymanTransactionGroup* _Nullable TinymanPrepareRedeemTransactions(NSString* _Nullable validatorAppID, NSString* _Nullable asset1ID, NSString* _Nullable asset2ID, NSString* _Nullable liquidityAssetID, NSString* _Nullable assetID, NSString* _Nullable assetAmount, NSString* _Nullable senderAddress, TinymanSuggestedParams* _Nullable suggestedParams, NSError* _Nullable* _Nullable error);

/**
 * PrepareSwapTransactions Prepare a transaction group to swap assets.
validatorAppID, asset1ID, asset2ID, liquidityAssetID, assetInID, assetInAmount, assetOutAmount are converted to uint64,
 */
FOUNDATION_EXPORT TinymanTransactionGroup* _Nullable TinymanPrepareSwapTransactions(NSString* _Nullable validatorAppID, NSString* _Nullable asset1ID, NSString* _Nullable asset2ID, NSString* _Nullable liquidityAssetID, NSString* _Nullable assetInID, NSString* _Nullable assetInAmount, NSString* _Nullable assetOutAmount, NSString* _Nullable swapType, NSString* _Nullable senderAddress, TinymanSuggestedParams* _Nullable suggestedParams, NSError* _Nullable* _Nullable error);

/**
 * SignTransactionWithPrivateKey signs a transaction with a given private key
 */
FOUNDATION_EXPORT TinymanSignedTransaction* _Nullable TinymanSignTransactionWithPrivateKey(NSData* _Nullable privateKey, TinymanTransaction* _Nullable tx, NSError* _Nullable* _Nullable error);

#endif
